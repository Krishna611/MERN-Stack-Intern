{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gvr_k\\\\Downloads\\\\mern_intern_assignment_full\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { AuthContext } from '../auth/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  role\n}) => {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext);\n\n  // Check if auth exists and token is present\n  if (!auth || !auth.token) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if role matches\n  if (role && auth.role !== role) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this); // redirect to login if role mismatch\n  }\n\n  // User is authorized\n  return children;\n};\n_s(ProtectedRoute, \"tr1QHgBDI2fKKLySXzFBgmQfvcw=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","Navigate","AuthContext","jsxDEV","_jsxDEV","ProtectedRoute","children","role","_s","auth","token","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gvr_k/Downloads/mern_intern_assignment_full/frontend/src/components/ProtectedRoute.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { AuthContext } from '../auth/AuthContext';\n\nconst ProtectedRoute = ({ children, role }) => {\n  const { auth } = useContext(AuthContext);\n\n  // Check if auth exists and token is present\n  if (!auth || !auth.token) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  // Check if role matches\n  if (role && auth.role !== role) {\n    return <Navigate to=\"/login\" />; // redirect to login if role mismatch\n  }\n\n  // User is authorized\n  return children;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM;IAAEC;EAAK,CAAC,GAAGT,UAAU,CAACE,WAAW,CAAC;;EAExC;EACA,IAAI,CAACO,IAAI,IAAI,CAACA,IAAI,CAACC,KAAK,EAAE;IACxB,oBAAON,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;;EAEA;EACA,IAAIR,IAAI,IAAIE,IAAI,CAACF,IAAI,KAAKA,IAAI,EAAE;IAC9B,oBAAOH,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC,CAAC;EACnC;;EAEA;EACA,OAAOT,QAAQ;AACjB,CAAC;AAACE,EAAA,CAfIH,cAAc;AAAAW,EAAA,GAAdX,cAAc;AAiBpB,eAAeA,cAAc;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}